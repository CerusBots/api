apiVersion: v1
kind: Pod
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.dev.yml -o kube/dev
    kompose.version: 1.26.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.network/servers: 'true'
    io.kompose.service: cache
  name: cache
spec:
  containers:
    - args:
        - --requirepass
      env:
        - name: EMAIL_HOST
          valueFrom:
            configMapKeyRef:
              key: EMAIL_HOST
              name: env
        - name: EMAIL_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: EMAIL_PASSWORD
              name: env
        - name: EMAIL_USERNAME
          valueFrom:
            configMapKeyRef:
              key: EMAIL_USERNAME
              name: env
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              key: KAFKA_BROKERS
              name: env
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              key: MYSQL_DATABASE
              name: env
        - name: MYSQL_HOST
          valueFrom:
            configMapKeyRef:
              key: MYSQL_HOST
              name: env
        - name: MYSQL_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: MYSQL_PASSWORD
              name: env
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              key: MYSQL_USER
              name: env
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              key: REDIS_HOST
              name: env
        - name: REDIS_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: REDIS_PASSWORD
              name: env
        - name: STRIPE_KEY
          valueFrom:
            configMapKeyRef:
              key: STRIPE_KEY
              name: env
        - name: STRIPE_WEBHOOK_SECRET
          valueFrom:
            configMapKeyRef:
              key: STRIPE_WEBHOOK_SECRET
              name: env
      image: redis:6.2-alpine
      name: cache
      resources: {}
      volumeMounts:
        - mountPath: /data
          name: data-cache
  restartPolicy: OnFailure
  volumes:
    - name: data-cache
      persistentVolumeClaim:
        claimName: data-cache
status: {}
